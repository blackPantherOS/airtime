%include "library/pervasives.liq"
%include "ls_config.liq"

set("log.file.path", log_file)
set("log.stdout", true)
set("server.telnet", true)

queue = request.queue(id="queue", conservative=true)
queue = audio_to_stereo(queue)

pypo_data = ref '0'
web_stream_enabled = ref false

def notify(m)
  system("./notify.sh --data='#{!pypo_data}' --media-id=#{m['schedule_table_id']}")
  print("./notify.sh --data='#{!pypo_data}' --media-id=#{m['schedule_table_id']}")
end

def crossfade(s)
  s = fade.in(type="log", s)
  s = fade.out(type="log", s)
  fader = fun (a,b) -> add(normalize=false,[b,a])
  cross(fader,s)
end

# Define a transition that fades out the
# old source, adds a single, and then 
# plays the new source
def to_live(old,new) = 
  # Fade out old source
  old = fade.final(old)
  # Compose this in sequence with
  # the new source
  sequence([old,new])
end

# Add a skip function to a source
# when it does not have one
# by default
def add_skip_command(s)
 # A command to skip
 def skip(_)
   source.skip(s)
   "Done!"
 end
 # Register the command:
 server.register(namespace="source",
                 usage="skip",
                 description="Skip the current song.",
                 "skip",skip)
end

server.register(namespace="vars", "pypo_data", fun (s) ->  begin pypo_data := s "Done" end)
server.register(namespace="vars", "web_stream_enabled", fun (s) ->  begin web_stream_enabled := (s == "true") string_of(!web_stream_enabled) end)

default = single(conservative=true, "/opt/pypo/files/basic/silence.mp3")
default = rewrite_metadata([("artist","Airtime"), ("title", "offline")],default)

s = fallback(track_sensitive=false, [queue, default])

s = on_metadata(notify, s)
s = crossfade(s)

# Attach a skip command to the source s:
add_skip_command(s)

web_stream_source = input.http(id="web_stream", autostart = false, buffer=0.5, max=20., "")

#once the stream is started, give it a sink so that liquidsoap doesn't
#create buffer overflow warnings in the log file.
output.dummy(fallible=true, web_stream_source)

s = switch(track_sensitive = false,
    transitions=[to_live,to_live],
    [
      ({ !web_stream_enabled }, web_stream_source),
      ({ true }, s)
    ]
)

if output_sound_device then
	out_device = out(s)
end

if output_icecast_mp3 then
	out_mp3 = output.icecast(%mp3,
			host = icecast_host, port = icecast_port,
			password = icecast_pass, mount = mount_point_mp3,
			fallible = true,
			restart = true,
			restart_delay = 5,
			url = icecast_url,
			description = icecast_description,
			genre = icecast_genre,
			s)
end

if output_icecast_vorbis then
	out_vorbis = output.icecast(%vorbis,
			host = icecast_host, port = icecast_port,
			password = icecast_pass, mount = mount_point_vorbis,
			fallible = true,
			restart = true,
			restart_delay = 5,
			url = icecast_url,
			description = icecast_description,
			genre = icecast_genre,
			s)
end

#!/bin/bash -e
#-e Causes bash script to exit if any of the installers
#return with a non-zero return value.

if [[ $EUID -ne 0 ]]; then
    echo "Please run as root user."
    exit 1
fi

AIRTIMEROOT=$(readlink -f ./..)

showhelp () {
    echo "Usage: sudo bash install [options]
    -h, --help, -?
                Display usage information
    -V, --version
                Display version information
    -v, --verbose
                More output
    -q, --quiet, --silent
                No output except errors
    -f, --force
                Turn off interactive prompts
    -w, --web-user=WEB_USER
                Set the default apache web user
    -i, --in-place
                Set the current Airtime root as the working directory for
                Airtime
                Note that you will need to give your web user permissions on
                these directories
    -d, --install-directory=INSTALL_PATH
                Set the web root for Airtime files
                This will copy the Airtime application files and make them
                accessible to the web user
                If no directory or an empty string is given, this defaults to
                an in-place installation, and will give the web user
                permissions on the current Airtime root
    -p, --postgres-init
                Create a default postgres user named 'airtime' with password
                'airtime'
    -a, --apache
                Install apache and deploys a basic configuration for Airtime"
    exit 0
}

showversion () {
    . ${AIRTIMEROOT}/VERSION > /dev/null
    echo "Airtime Version ${PRODUCT_RELEASE}"
    exit 0
}

web_user="www-data"
install_directory=""
apache="f"
in_place="f"
create_postgres_user="f"
# Interactive
_i=1
# Verbose
_v=0
# Quiet
_q=0

function verbose() {
    if [[ ${_v} -eq 1 ]]; then
        echo -e "$@"
    fi
}

function loud() {
    if [[ ${_q} -eq 0 ]]; then
        echo -e "$@"
    fi
}

# Evaluate commands silently if quiet
function loudCmd() {
    if [[ ${_q} -eq 0 ]]; then
        eval $@
    else
        eval $@ > /dev/null
    fi
}


while :; do
    case "$1" in
        -h|-\?|--help)
            showhelp
            exit
            ;;
        -V|--version)
            showversion
            ;;
        -v|--verbose)
            _v=1
            ;;
        -q|--quiet|--silent)
            _q=1
            ;;
        -f|--force)
            _i=0
            ;;
        -a|--apache)
            apache="t"
            ;;
        -i|--in-place)
            in_place="t"
            ;;
        -p|--postgres-init)
            create_postgres_user="t"
        ;;
        -w|--web-user)
            if [ "$2" ]; then
                web_user=$2
                shift 2
                continue
            else
                echo 'ERROR: Must specify a non-empty "--web-user WEB_USER" argument.' >&2
                exit 1
            fi
            ;;
        --web-user=?*)
            web_user=${1#*=} # Delete everything up to "=" and assign the remainder.
            ;;
        --web-user=)
            echo 'ERROR: Must specify a non-empty "--web-user=WEB_USER" argument.' >&2
            exit 1
            ;;
        -d|--install-directory)
            if [ "$2" ]; then
                install_directory=$(readlink -f $2)
                shift 2
                continue
            else
                echo 'ERROR: Must specify a non-empty "--install-directory INSTALL_DIRECTORY" argument.' >&2
                exit 1
            fi
            ;;
        --install-directory=?*)
            install_directory=${1#*=} # Delete everything up to "=" and assign the remainder.
            ;;
        --install-directory=)
            echo 'ERROR: Must specify a non-empty "--install-directory=INSTALL_DIRECTORY" argument.' >&2
            exit 1
            ;;
        --)
            shift
            break
            ;;
        -?*)
            echo "$0: error - unrecognized option $1" 1>&2;
            echo "Try 'install --help' for more information."
            exit 1
            ;;
        *)
            break
    esac
    shift
done

if [ -z install_directory -a ! -d install_directory ]; then
    echo "$install_directory doesn't exist!"
    exit 1
fi

dist=`lsb_release -is`

echo -e "\n   _____  .________________________.___   _____  ___________   "
echo    "  /  _  \ |   \______   \__    ___/|   | /     \ \_   _____/     "
echo    " /  /_\  \|   ||       _/ |    |   |   |/  \ /  \ |    __)_      "
echo    "/    |    \   ||    |   \ |    |   |   /    Y    \|        \     "
echo    "\____|__  /___||____|_  / |____|   |___\____|__  /_______  /     "
echo -e "        \/            \/                       \/        \/    \n"

echo    "  ____ ______   ____   ____     __________  __ _________   ____  ____    "
echo    " /  _ \\\\____ \_/ __ \ /    \   /  ___/  _ \|  |  \_  __ \_/ ___\/ __ \ "
echo    "(  <_> )  |_> >  ___/|   |  \  \___ (  <_> )  |  /|  | \/\  \__\  ___/   "
echo    " \____/|   __/ \___  >___|  / /____  >____/|____/ |__|    \___  >___  >  "
echo    "       |__|        \/     \/       \/                         \/    \/   "
echo    "                   .___.__                        __                         __  .__                      "
echo    "____________     __| _/|__| ____   _____   __ ___/  |_  ____   _____ _____ _/  |_|__| ____   ____         "
echo    "\_  __ \__  \   / __ | |  |/  _ \  \__  \ |  |  \   __\/  _ \ /     \\\\__  \\\\   __\  |/  _ \ /    \    "
echo    " |  | \// __ \_/ /_/ | |  (  <_> )  / __ \|  |  /|  | (  <_> )  Y Y  \/ __ \|  | |  (  <_> )   |  \       "
echo    " |__|  (____  /\____ | |__|\____/  (____  /____/ |__|  \____/|__|_|  (____  /__| |__|\____/|___|  /       "
echo -e "            \/      \/                  \/                         \/     \/                    \/      \n"

if [ "$apache" = "f" -a ${_i} -eq 1 ]; then
    echo -e "Install default Airtime apache configuration? (Y/n): \c"
    read IN
    if [ "${IN}" = "y" -o "${IN}" = "Y" ]; then
        apache="t"
    fi
fi

if [ "$apache" = "t" ]; then
    loud "\n-----------------------------------------------------"
    loud "                * Installing Apache *                "
    loud "-----------------------------------------------------"

    if [ "$in_place" = "t" ]; then
        verbose "\n * Setting current Airtime directory as web root..."
        install_directory=${AIRTIMEROOT}/airtime_mvc/public
        chmod -R 755 ${AIRTIMEROOT}
    elif [ -n "$install_directory" ]; then
        verbose "\n * Creating Apache web root directory..."
        mkdir -p ${install_directory}/airtime/public/
        cp -R ${AIRTIMEROOT}/airtime_mvc/* ${install_directory}/airtime/
        chmod -R 755 ${install_directory}
    else
        verbose "\n * Creating default Apache web root directory /usr/share/airtime/..."
        install_directory="/usr/share"
        mkdir -p ${install_directory}/airtime/public/
        cp -R ${AIRTIMEROOT}/airtime_mvc/* ${install_directory}/airtime/
    fi

    sed -e "s@WEB_ROOT@${install_directory}@g" apache/airtime-vhost > apache/airtime-vhost.tmp

    loudCmd "apt-get -y --force-yes install apache2 libapache2-mod-php5"
    set +e
    apache2 -v | grep "2\.4" > /dev/null
    apacheversion=$?
    set -e

    if [ "$apacheversion" != "1" ]; then
        airtimeconfigfile="airtime.conf"
    else
        airtimeconfigfile="airtime"
    fi

    if [ ! -f /etc/apache2/sites-available/${airtimeconfigfile} ]; then
        verbose "\n * Creating Apache config for Airtime..."

        mv apache/airtime-vhost.tmp /etc/apache2/sites-available/${airtimeconfigfile}
        loudCmd "a2dissite 000-default"
        loudCmd "a2ensite airtime"
    else
        verbose "\nApache config for Airtime already exists, skipping"
        rm -f apache/airtime-vhost.tmp
    fi
fi

if [ ! -d /var/log/airtime ]; then
    loud "\n-----------------------------------------------------"
    loud "              * Installing Log Files *               "
    loud "-----------------------------------------------------"

    verbose "\n * Creating /var/log/airtime..."
    mkdir -p /var/log/airtime
    chmod a+x /var/log/airtime
    chown ${web_user}:${web_user} /var/log/airtime/

    cp ${AIRTIMEROOT}/airtime_mvc/build/airtime-php.logrotate /etc/logrotate.d/airtime-php
fi

loud "\n-----------------------------------------------------"
loud "                  * Installing PHP *                 "
loud "-----------------------------------------------------"

loudCmd "apt-get -y --force-yes install php5"

verbose "\n * Installing Zend framework..."
#Debian Squeeze only has zendframework package. Newer versions of Ubuntu have zend-framework package.
#Ubuntu Lucid has both zendframework and zend-framework. Difference appears to be that zendframework is for
#1.10 and zend-framework is 1.11
if [ "$dist" = "Debian" ]; then
    loudCmd "apt-get -y --force-yes install zendframework"
else
    loudCmd "apt-get -y --force-yes install libzend-framework-php"
fi

# PHP Config File for Apache
if [ ! -f "/etc/php5/apache2/conf.d/airtime.ini" ]; then
    verbose "\n * Creating Airtime PHP config for Apache..."
    cp php/airtime.ini /etc/php5/apache2/conf.d/airtime.ini
else
    verbose "\nAirtime PHP config for Apache already exists, skipping"
fi

# Enable modules
loudCmd "a2enmod rewrite php5"

loud "\n-----------------------------------------------------"
loud "              * Installing PostgreSQL *              "
loud "-----------------------------------------------------"

loudCmd "apt-get -y --force-yes install postgresql php5-pgsql"

setupAirtimePostgresUser() {
    su postgres <<'EOF'
    psql -d postgres -tAc "CREATE USER airtime WITH ENCRYPTED PASSWORD 'airtime'; ALTER USER airtime CREATEDB;"
EOF
}

if [ "$create_postgres_user" = "t" ]; then
    setupAirtimePostgresUser
elif [ ${_i} -eq 1 ]; then
    echo -e "Create default airtime postgres user? (Y/n): \c"
    read IN
    if [ "$IN" = "y" -o "$IN" = "Y" ]; then
        setupAirtimePostgresUser
    fi
fi

loud "\n-----------------------------------------------------"
loud "               * Setting up RabbitMQ *               "
loud "-----------------------------------------------------"

loudCmd "apt-get -y --force-yes install rabbitmq-server"

RABBITMQ_VHOST=$(awk -F ' = ' '{if (! ($0 ~ /^;/) && $0 ~ /^vhost/ ) print $2}' ${AIRTIMEROOT}/airtime_mvc/build/airtime.example.conf)
RABBITMQ_USER=$(awk -F ' = ' '{if (! ($0 ~ /^;/) && $0 ~ /^user/ ) print $2}' ${AIRTIMEROOT}/airtime_mvc/build/airtime.example.conf)
RABBITMQ_PASSWORD=$(awk -F ' = ' '{if (! ($0 ~ /^;/) && $0 ~ /^password/ ) print $2}' ${AIRTIMEROOT}/airtime_mvc/build/airtime.example.conf)
EXCHANGES="airtime-pypo|pypo-fetch|airtime-media-monitor|media-monitor"

# Ignore errors in this check to avoid dying when vhost isn't found
set +e
rabbitmqctl list_vhosts | grep -w ${RABBITMQ_VHOST}
RESULT="$?"
set -e

# Only run these if the vhost doesn't exist
if [ "${RESULT}" != "0" ]; then
    verbose "\n * Creating RabbitMQ user ${RABBITMQ_USER}..."

    rabbitmqctl add_vhost ${RABBITMQ_VHOST}
    rabbitmqctl add_user ${RABBITMQ_USER} ${RABBITMQ_PASSWORD}
else
    verbose "\nRabbitMQ user already exists, skipping creation"
fi

verbose "\n * Setting RabbitMQ user permissions..."
loudCmd "rabbitmqctl set_permissions -p ${RABBITMQ_VHOST} ${RABBITMQ_USER} \"$EXCHANGES\" \"$EXCHANGES\" \"$EXCHANGES\""

if [ ! -d "/etc/airtime" ]; then
    loud "\n-----------------------------------------------------"
    loud "                * Installing Airtime *               "
    loud "-----------------------------------------------------"

    verbose "\n * Creating /etc/airtime/ directory..."
    mkdir -p /srv/airtime
    mkdir /etc/airtime
    chown -R ${web_user}:${web_user} /srv/airtime
    chown -R ${web_user}:${web_user} /etc/airtime
fi

verbose "\n * Restarting apache..."
loudCmd "service apache2 restart 2>/dev/null"

echo -e "\n-----------------------------------------------------"
echo    "                * Basic Setup DONE! *                "
echo    "                                                     "
echo    "  To get started with Airtime, visit localhost:5000  "
echo    "   or, if you've set up your own web configuration,  "
echo    "        the Airtime webroot on your webserver        "
echo    "            in your web browser of choice            "
echo    "-----------------------------------------------------"
